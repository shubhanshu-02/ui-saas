// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id        String   @id @default(uuid())
  email     String?  @unique
  name      String?
  tier      Tier     @default(FREE)
  isDemo    Boolean  @default(false)
  createdAt DateTime @default(now())

  savedComponents SavedComponent[]
  chatSessions    ChatSession[]

  accounts Account[]
  sessions Session[]
}

model SavedComponent {
  id        String   @id @default(uuid())
  name      String
  code      String
  prompt    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
}

model ChatSession {
  id        String        @id @default(uuid())
  user      User         @relation(fields: [userId], references: [id])
  userId    String
  messages  ChatMessage[]
  createdAt DateTime     @default(now())
}

model ChatMessage {
  id        String      @id @default(uuid())
  type      MessageType
  content   String
  session   ChatSession @relation(fields: [sessionId], references: [id])
  sessionId String
  createdAt DateTime    @default(now())
}

enum Tier {
  DEMO
  FREE
  PRO
}

enum MessageType {
  USER
  ASSISTANT
  ERROR
}

// NextAuth models
model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}